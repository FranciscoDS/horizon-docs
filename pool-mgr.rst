Pool Manger
===========

The Pool Manager and Part Wizard help with managing things in the Pool
like symbols, entities and parts. You're most likely to use the Pool
Manager for creating new parts. To open the pool manager, launch
``horizon-eda``\ (``.exe``) and point it to the pool.json of the pool
you'd like to edit. Depending on what kind of part you want to create,
several workflows are available:

Inherting from an existing part
-------------------------------

When the part you're about to create already exisits in a different
variant (different value or different temperature range) but is
otherwise all identical, the new part should inherit from the existing
part. To do so, select the desired base part in the "Parts" tab and
click "Create Part from Part". After having specified the new part's
location, you'll be shown the Part Editor. Uncheck the "inherit" option
for the attributes you'd like to change and save the new part.

Create part from existing Entity
--------------------------------

This workflow is appropriate when the Entity for the new part already
exists. Resistors or LEDs in nonstandard packages are of this kind, for
example. For creating a new package see :doc:`create-package`. In
the "Parts" tab, click on "Create Part" for creating the new part. After
specify entity and package and the part's location you can edit the part
and map pads to pins in the Part Editor.

Create all-new part
-------------------

Many parts such as MCUs, FPGAs, ADCs and other miracles of today's world
require creating new units and entities. Doing so manually would be very
tedious, that's why there's the Part Wizard to assist you. After having
selected the part's package (for creating packages, see :doc:`create-package` ) in the "Packages" tab, click on "Part
Wizard..." to launch it. You'll be greeted with a list of all Pads of
the package.

Fill in the pin names according to the datasheet. Only put the pins
primary name (like PB5) on an MCU in the leftmost entry and put all
other names (like UART0_TX, TA0) space-separated in the "Alt. names"
Entry. If your part is *really* big (such as an FPGA or large MCU) you
may want it to appear as more than one symbol in the schematic. To do
so, select all the pads you'd like to have in the same symbol and type
in the new Gate name. In case many Pads are electrically identical (such
as many GND pads) you may group them by selecting them and clicking the
"Link Pads" button in the bottom toolbar. This way, only one Pin will be
generated for these Pads.

For really large parts with 100+ pins, putting them all in manually can
be too tedious. To get around is, the part wizard can import pin names
from a json file. This json file is meant to be generated by some ad-hoc
python script or the like. The json should look like this:

::

   {
       "1": {"pin": "PB0", "alt": ["TXD", "SDA"], "gate":"Main"},
       "2": {"pin": "PB1", "alt": ["RXD", "SCL"], "gate":"Main"}
   }

The key specifies the pad name. Entries with the ``pin``-``gate`` will
get their pads merged.

Reasonable sources for pin/pad name data are:

-  IBIS models
-  BSDL files
-  PDF datasheets

I managed to extract the pin/pad data from one particular datasheet by
copy/pasting text into LibreOffice Calc, cleaning it up in there and
exporting it as a CSV file. This file was then in turn converted to the
aforementioned json file.

Once you're done filling in the pin names, click "Next" in the top left
corner for advancing to the next screen. Fill in the entries according
to your part. In case you're unsure on what to put in, take a look at
existing parts in the pool. If your part is available in multiple
almost-identical variants that only differ in aspects such as
temperature range or packing option (Tape/Reel, Tube, etc.) create the
part you're about to use. For creating the other variants, follow the
instructions in the topmost section. Take care of specifying the correct
location for units/symbols/entity and parts, so that they end in a
subdirectory of their respective directory in the pool.

For each gate, click on "Edit Symbol" for launching an interactive
manipulator to create the symbol for that unit. Use the "Map pin" tool
to place the pins in the symbol and "Draw line rectangle"/"Edit line
rectangle" for drawing the symbols body. Don't forget to give the symbol
a meaningful name and place the "$REFDES" and "$VALUE" texts.

When you've drawn all the symbols an filled in all of the metadata,
click "Finish" to finally insert the part into the pool.

Where to save things
--------------------

When creating new symbols, parts and the like the pool manager/part
wizard will sooner or later ask you for a file name or a directory (in
case of packages) to save the new part. Technically, the path you
specify only needs to meet two requirements:

-  It needs to be in the correct top-level directory, i.e. every symbol
   has to be somewhere in /symbols and so on. Padstacks specific to a
   package must be placed in the package's padstack directory.
-  The file has to end in ``.json``

To get an idea of how all this looks in practice, take a look at `the
pool <https://github.com/carrotIndustries/horizon-pool/>`__

The Pool database
-----------------

The Pool keeps the metadata (filenames, UUIDs, names, etc.) in a SQLite
database to facilitate searching. Normally, the pool manager rebuilds
the database from scratch every time something has changed. However, if
you externally manipulate/remove files, you'll have to click "Update
Pool" for the database to include the changes you made.

Using the GitHub integration.
-----------------------------

For the GitHub integration to work, the pool has to be downloaded using
the "Download..." button on the start Page of the pool manager. The pool
manager will clone the global pool into the ``.remote`` directory in
your local pool. If all goes right, you should never need to touch that
directory. Two operations are available for keeping your local copy
up-to-date and merging your parts into the global pool

Upgrade pool
~~~~~~~~~~~~

This will update your copy of the global pool in the ``.remote``
directory to the latest commit and ask you which changes you'd like to
have applied to your local pool.

Create pull request
~~~~~~~~~~~~~~~~~~~

First, add the Parts/Entities/etc. to the "items to be merged" list,
then fill in Pull Request title and body. The pool manager will
automatically add items that are needed to not break references. So if
you create an all-new Part with new Unit, Entity and Package, these will
get added to the list when you add the Part. Don't forget to add the new
symbols. After making sure that this is what you want, click the "Create
pull request" button. You'll be prompted for your GitHub credentials as
well as your name and email address for the commit author information.
